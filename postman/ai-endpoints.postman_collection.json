{
  "info": {
    "name": "Catalogo Inteligente - AI Endpoints",
    "_postman_id": "ai-endpoints-collection-123",
    "description": "AI endpoints for paint recommendations, semantic search, and image generation. Authentication required for most endpoints.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "AI Chat - Unified Recommendations",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userMessage\": \"Preciso de uma tinta azul para o quarto do meu filho\",\n  \"history\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Olá, preciso de ajuda para escolher tintas\"\n    },\n    {\n      \"role\": \"assistant\",\n      \"content\": \"Olá! Posso te ajudar a escolher a tinta ideal. Que tipo de ambiente você quer pintar?\"\n    }\n  ]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/ai/chat",
          "host": ["{{baseUrl}}"],
          "path": ["ai", "chat"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test('Has picks and message', () => {",
              "  pm.expect(json).to.have.property('picks');",
              "  pm.expect(json).to.have.property('message');",
              "});",
              "pm.test('Picks is array', () => Array.isArray(json.picks));",
              "if (json.paletteImage) {",
              "  pm.test('Has palette image', () => {",
              "    pm.expect(json.paletteImage).to.have.property('imageBase64');",
              "    pm.expect(json.paletteImage).to.have.property('provider');",
              "  });",
              "}",
              "console.log('AI recommended', json.picks.length, 'paints');",
              "console.log('Message:', json.message);",
              "if (json.paletteImage) {",
              "  console.log('Generated palette image with provider:', json.paletteImage.provider);",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "Semantic Search",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"query\": \"tinta para quarto infantil lavável\"}"
        },
        "url": {
          "raw": "{{baseUrl}}/ai/search",
          "host": ["{{baseUrl}}"],
          "path": ["ai", "search"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test('Returns array of results', () => Array.isArray(json));",
              "pm.test('Results have id and reason', () => {",
              "  if (json.length > 0) {",
              "    pm.expect(json[0]).to.have.property('id');",
              "    pm.expect(json[0]).to.have.property('reason');",
              "  }",
              "});",
              "console.log('Found', json.length, 'paints matching query');"
            ]
          }
        }
      ]
    },
    {
      "name": "Generate Palette Image",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sceneId\": \"quarto/01\",\n  \"hex\": \"#5FA3D1\",\n  \"finish\": \"fosco\",\n  \"size\": \"1024x1024\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/ai/palette-image",
          "host": ["{{baseUrl}}"],
          "path": ["ai", "palette-image"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test('Has image data', () => {",
              "  pm.expect(json).to.have.property('imageBase64');",
              "  pm.expect(json).to.have.property('provider');",
              "});",
              "pm.test('Image is base64', () => {",
              "  pm.expect(json.imageBase64).to.be.a('string');",
              "  pm.expect(json.imageBase64.length).to.be.greaterThan(1000);",
              "});",
              "console.log('Generated image with provider:', json.provider);",
              "console.log('Image size:', json.imageBase64.length, 'characters');"
            ]
          }
        }
      ]
    },
    {
      "name": "AI Chat - Image Generation Request",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userMessage\": \"Gera uma imagem da sala pintada de azul\",\n  \"history\": []\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/ai/chat",
          "host": ["{{baseUrl}}"],
          "path": ["ai", "chat"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test('Has response structure', () => {",
              "  pm.expect(json).to.have.property('picks');",
              "  pm.expect(json).to.have.property('message');",
              "});",
              "if (json.paletteImage) {",
              "  pm.test('Generated image successfully', () => {",
              "    pm.expect(json.paletteImage).to.have.property('imageBase64');",
              "    pm.expect(json.paletteImage).to.have.property('provider');",
              "  });",
              "  console.log('Generated palette image with provider:', json.paletteImage.provider);",
              "}",
              "console.log('Message:', json.message);"
            ]
          }
        }
      ]
    },
    {
      "name": "AI Chat - Bathroom Paint Request",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userMessage\": \"Preciso de uma tinta para banheiro que seja antimofo\",\n  \"history\": []\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/ai/chat",
          "host": ["{{baseUrl}}"],
          "path": ["ai", "chat"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test('Has recommendations', () => {",
              "  pm.expect(json).to.have.property('picks');",
              "  pm.expect(json).to.have.property('message');",
              "});",
              "console.log('AI recommended', json.picks.length, 'bathroom paints');",
              "console.log('Message:', json.message);"
            ]
          }
        }
      ]
    },
    {
      "name": "AI Chat - Kitchen Paint Request",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userMessage\": \"Quero uma tinta para cozinha que seja resistente a gordura\",\n  \"history\": []\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/ai/chat",
          "host": ["{{baseUrl}}"],
          "path": ["ai", "chat"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test('Has recommendations', () => {",
              "  pm.expect(json).to.have.property('picks');",
              "  pm.expect(json).to.have.property('message');",
              "});",
              "console.log('AI recommended', json.picks.length, 'kitchen paints');",
              "console.log('Message:', json.message);"
            ]
          }
        }
      ]
    },
    {
      "name": "AI Chat - Modern Living Room",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userMessage\": \"Preciso de uma tinta moderna para sala de estar elegante\",\n  \"history\": []\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/ai/chat",
          "host": ["{{baseUrl}}"],
          "path": ["ai", "chat"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test('Has recommendations', () => {",
              "  pm.expect(json).to.have.property('picks');",
              "  pm.expect(json).to.have.property('message');",
              "});",
              "console.log('AI recommended', json.picks.length, 'modern living room paints');",
              "console.log('Message:', json.message);"
            ]
          }
        }
      ]
    },
    {
      "name": "AI Chat - External Paint",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userMessage\": \"Preciso de uma tinta para área externa que seja resistente ao clima\",\n  \"history\": []\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/ai/chat",
          "host": ["{{baseUrl}}"],
          "path": ["ai", "chat"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test('Has recommendations', () => {",
              "  pm.expect(json).to.have.property('picks');",
              "  pm.expect(json).to.have.property('message');",
              "});",
              "console.log('AI recommended', json.picks.length, 'external paints');",
              "console.log('Message:', json.message);"
            ]
          }
        }
      ]
    },
    {
      "name": "Generate Palette Image - Different Scene",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sceneId\": \"sala/01\",\n  \"hex\": \"#E8B4B8\",\n  \"finish\": \"acetinado\",\n  \"size\": \"1024x768\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/ai/palette-image",
          "host": ["{{baseUrl}}"],
          "path": ["ai", "palette-image"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test('Has image data', () => {",
              "  pm.expect(json).to.have.property('imageBase64');",
              "  pm.expect(json).to.have.property('provider');",
              "});",
              "console.log('Generated image with provider:', json.provider);"
            ]
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/bff"
    },
    {
      "key": "accessToken",
      "value": "your-jwt-token-here"
    }
  ]
}
